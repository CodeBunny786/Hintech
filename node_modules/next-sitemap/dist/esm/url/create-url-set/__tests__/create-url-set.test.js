var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { createUrlSet } from '..';
import { sampleConfig } from '../../../fixtures/config';
import { sampleManifest } from '../../../fixtures/manifest';
describe('createUrlSet', () => {
    test('without exclusion', () => __awaiter(void 0, void 0, void 0, function* () {
        const urlset = yield createUrlSet(sampleConfig, sampleManifest);
        expect(urlset).toStrictEqual([
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-0',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-1',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-2',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-3',
            },
        ]);
    }));
    test('with exclusion', () => __awaiter(void 0, void 0, void 0, function* () {
        const urlset = yield createUrlSet(Object.assign(Object.assign({}, sampleConfig), { exclude: ['/', '/page-0', '/page-2'] }), sampleManifest);
        expect(urlset).toStrictEqual([
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-1',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-3',
            },
        ]);
    }));
    test('with wildcard exclusion', () => __awaiter(void 0, void 0, void 0, function* () {
        const urlset = yield createUrlSet(Object.assign(Object.assign({}, sampleConfig), { exclude: ['/page*'] }), sampleManifest);
        expect(urlset).toStrictEqual([
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com',
            },
        ]);
    }));
    test('without trailing slash', () => __awaiter(void 0, void 0, void 0, function* () {
        const urlset = yield createUrlSet(Object.assign(Object.assign({}, sampleConfig), { trailingSlash: false }), sampleManifest);
        expect(urlset).toStrictEqual([
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-0',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-1',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-2',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-3',
            },
        ]);
    }));
    test('with trailing slash', () => __awaiter(void 0, void 0, void 0, function* () {
        const urlset = yield createUrlSet(Object.assign(Object.assign({}, sampleConfig), { trailingSlash: true }), sampleManifest);
        expect(urlset).toStrictEqual([
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-0/',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-1/',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-2/',
            },
            {
                changefreq: 'daily',
                lastmod: expect.any(String),
                priority: 0.7,
                loc: 'https://example.com/page-3/',
            },
        ]);
    }));
    test('with custom transform', () => __awaiter(void 0, void 0, void 0, function* () {
        const urlset = yield createUrlSet(Object.assign(Object.assign({}, sampleConfig), { trailingSlash: true, transform: (_, url) => {
                if (!['/', '/page-2'].includes(url)) {
                    return;
                }
                return {
                    loc: url,
                    changefreq: 'yearly',
                };
            } }), sampleManifest);
        expect(urlset).toStrictEqual([
            {
                changefreq: 'yearly',
                loc: 'https://example.com/',
            },
            {
                changefreq: 'yearly',
                loc: 'https://example.com/page-2/',
            },
        ]);
    }));
});
