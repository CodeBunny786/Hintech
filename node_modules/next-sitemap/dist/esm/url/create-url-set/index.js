var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { isNextInternalUrl, generateUrl } from '../util';
import { removeIfMatchPattern } from '../../array';
export const absoluteUrl = (siteUrl, path, trailingSlash) => {
    const url = generateUrl(siteUrl, trailingSlash ? `${path}/` : path);
    if (!trailingSlash && url.endsWith('/')) {
        return url.slice(0, url.length - 1);
    }
    return url;
};
/**
 * Create a unique url set
 * @param config
 * @param manifest
 */
export const createUrlSet = (config, manifest) => __awaiter(void 0, void 0, void 0, function* () {
    let allKeys = [
        ...Object.keys(manifest.build.pages),
        ...(manifest.preRender ? Object.keys(manifest.preRender.routes) : []),
    ];
    // Remove the urls based on config.exclude array
    if (config.exclude && config.exclude.length > 0) {
        allKeys = removeIfMatchPattern(allKeys, config.exclude);
    }
    // Filter out next.js internal urls and generate urls based on sitemap
    let urlSet = allKeys.filter((x) => !isNextInternalUrl(x));
    urlSet = [...new Set(urlSet)];
    // Create sitemap fields based on transformation
    let sitemapFields = []; // transform using relative urls
    for (const url of urlSet) {
        const sitemapFiled = yield config.transform(config, url);
        sitemapFields.push(sitemapFiled);
    }
    sitemapFields = sitemapFields
        .filter((x) => Boolean(x) && Boolean(x.loc)) // remove null values
        .map((x) => (Object.assign(Object.assign({}, x), { loc: absoluteUrl(config.siteUrl, x.loc, config.trailingSlash) })));
    return sitemapFields;
});
